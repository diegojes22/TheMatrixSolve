package net.diego.sistemasdeecuaciones;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

/**
 *
 * @author Diego Mu√±oz
 */
public class BalanceApp extends javax.swing.JFrame {

    /**
     * Creates new form Balanceo
     */
    public BalanceApp() {
        initComponents();
        this.setResizable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        programInfo = new javax.swing.JDialog();
        winBackground = new javax.swing.JPanel();
        tagForInputBalance = new javax.swing.JLabel();
        inputBalance = new java.awt.TextField();
        solutionButton = new java.awt.Button();
        shoeMethodButton = new java.awt.Button();
        tagForOutSolution = new java.awt.Label();
        outSolution = new java.awt.Label();
        clearInputOutput = new java.awt.Button();
        mainWinMenu = new javax.swing.JMenuBar();
        fileSubMenu = new javax.swing.JMenu();
        exitOption = new javax.swing.JMenuItem();
        moreSubMenu = new javax.swing.JMenu();
        moreAppInfo = new javax.swing.JMenuItem();

        jMenu1.setText("jMenu1");

        programInfo.setTitle("Mas informacion");

        javax.swing.GroupLayout programInfoLayout = new javax.swing.GroupLayout(programInfo.getContentPane());
        programInfo.getContentPane().setLayout(programInfoLayout);
        programInfoLayout.setHorizontalGroup(
            programInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        programInfoLayout.setVerticalGroup(
            programInfoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(51, 51, 51));

        winBackground.setBackground(new java.awt.Color(51, 51, 51));

        tagForInputBalance.setForeground(new java.awt.Color(255, 255, 255));
        tagForInputBalance.setText("Ingrese el balanceo");

        inputBalance.setBackground(new java.awt.Color(102, 102, 102));
        inputBalance.setForeground(new java.awt.Color(255, 255, 255));
        inputBalance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                inputBalanceActionPerformed(evt);
            }
        });

        solutionButton.setBackground(new java.awt.Color(51, 51, 51));
        solutionButton.setForeground(new java.awt.Color(255, 255, 255));
        solutionButton.setLabel("Solucionar");
        solutionButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                solutionButtonActionPerformed(evt);
            }
        });

        shoeMethodButton.setBackground(new java.awt.Color(51, 51, 51));
        shoeMethodButton.setForeground(new java.awt.Color(255, 255, 255));
        shoeMethodButton.setLabel("Procedimiento");
        shoeMethodButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                shoeMethodButtonActionPerformed(evt);
            }
        });

        tagForOutSolution.setForeground(new java.awt.Color(255, 255, 255));
        tagForOutSolution.setText("Solucion");

        outSolution.setBackground(new java.awt.Color(102, 102, 102));
        outSolution.setForeground(new java.awt.Color(255, 255, 255));
        outSolution.setText(". . .");

        clearInputOutput.setBackground(new java.awt.Color(51, 51, 51));
        clearInputOutput.setForeground(new java.awt.Color(255, 255, 255));
        clearInputOutput.setLabel("limpiar");
        clearInputOutput.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearInputOutputActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout winBackgroundLayout = new javax.swing.GroupLayout(winBackground);
        winBackground.setLayout(winBackgroundLayout);
        winBackgroundLayout.setHorizontalGroup(
            winBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(winBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(winBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(outSolution, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tagForInputBalance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 169, Short.MAX_VALUE)
                    .addComponent(inputBalance, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(tagForOutSolution, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 57, Short.MAX_VALUE)
                .addGroup(winBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(shoeMethodButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(solutionButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(clearInputOutput, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        winBackgroundLayout.setVerticalGroup(
            winBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(winBackgroundLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(winBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(solutionButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(winBackgroundLayout.createSequentialGroup()
                        .addComponent(tagForInputBalance)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(inputBalance, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(winBackgroundLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(winBackgroundLayout.createSequentialGroup()
                        .addGap(31, 31, 31)
                        .addComponent(tagForOutSolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(outSolution, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(winBackgroundLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(shoeMethodButton, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(clearInputOutput, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(198, Short.MAX_VALUE))
        );

        tagForInputBalance.getAccessibleContext().setAccessibleName("labelForInput");
        inputBalance.getAccessibleContext().setAccessibleName("inputBalance");

        fileSubMenu.setText("File");

        exitOption.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        exitOption.setText("Salir");
        exitOption.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitOptionActionPerformed(evt);
            }
        });
        fileSubMenu.add(exitOption);

        mainWinMenu.add(fileSubMenu);

        moreSubMenu.setText("More");

        moreAppInfo.setText("informacion");
        moreAppInfo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                moreAppInfoActionPerformed(evt);
            }
        });
        moreSubMenu.add(moreAppInfo);

        mainWinMenu.add(moreSubMenu);

        setJMenuBar(mainWinMenu);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(winBackground, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(winBackground, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        winBackground.getAccessibleContext().setAccessibleName("WinBackground");

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void inputBalanceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_inputBalanceActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_inputBalanceActionPerformed

    private void exitOptionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitOptionActionPerformed
        System.exit(0);
    }//GEN-LAST:event_exitOptionActionPerformed

    private void moreAppInfoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_moreAppInfoActionPerformed
        infoMessageWin(
                "Informacion", 
                "Aplicacion en fase de desarrollo.\n\nCreado por: \n* Juan Carlos\n* El Adrian\n* Diego\n* Alguien mas....");
    }//GEN-LAST:event_moreAppInfoActionPerformed

    private void solutionButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_solutionButtonActionPerformed
        String balance = inputBalance.getText();
        
        if(balance.equals("")) {
            errorMessageWin("Advertencia", "No hay una ecuacion quimica a balancear");
            return;
        }
        
        try {
            solve();
        }catch(Exception er) {
            this.errorMessageWin("Error", "A ocurrido un error desconocido. \nEstos errores pueden ser comunes en esta version de desarrollo");
        }
    }//GEN-LAST:event_solutionButtonActionPerformed

    private void shoeMethodButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_shoeMethodButtonActionPerformed
        errorMessageWin("Opcion no implementada", "Esta opcion todavia esta en fase de desarollo.\nSera implementada en futuras versiones.");
    }//GEN-LAST:event_shoeMethodButtonActionPerformed

    private void clearInputOutputActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearInputOutputActionPerformed
        System.out.println("Limpiando . . .");
        
        inputBalance.setText("");
        outSolution.setText(". . .");
    }//GEN-LAST:event_clearInputOutputActionPerformed

    // Resolver el balance de ecuaciones quimicas
    public void solve() {
        // obtener ecuacion quimica
        String ecuacion = inputBalance.getText();
        
        String[] splitReaPro = ecuacion.split("=");

        String reactantes = splitReaPro[0].trim(); // Reactantes
        String productos = splitReaPro[1].trim(); // Productos

        // Dividir los reactantes y productos en compuestos con el "+" como split
        String[] reactantesCompuestos = reactantes.split("\\+");
        String[] productosCompuestos = productos.split("\\+");
        
        // Obtener todos los elementos presentes en la ecuaci√≥n
        List<String> elementos = obtenerElementos(reactantesCompuestos, productosCompuestos);
        
        // Crear matriz de coeficientes
        double[][] matriz = crearMatrizCoeficientes(reactantesCompuestos, productosCompuestos, elementos);

        // Imprimir la matriz de coeficientes
        imprimirMatriz(matriz);
        
        Matriz.printVector(MetodoGaussJordan.solveUsingGaussJordan(matriz));
        outSolution.setText(net.diego.sistemasdeecuaciones.more.CoreList.getConfigCoreList4Win(ecuacion));
        MetodoGaussJordan.solve(new Matriz(matriz));
    }
    
    /* Procedimientos para resolver el sistema */
    // M√©todo para obtener todos los elementos presentes en la ecuaci√≥n
    public static List<String> obtenerElementos(String[] reactantesCompuestos, String[] productosCompuestos) {
        List<String> elementos = new ArrayList<>();
        
        // Procesar los reactantes
        for (String compuesto : reactantesCompuestos) {
            procesarCompuesto(compuesto, elementos);
        }
        
        // Procesar los productos
        for (String compuesto : productosCompuestos) {
            procesarCompuesto(compuesto, elementos);
        }
        
        return elementos;
    }

    // M√©todo para procesar un compuesto y agregar sus elementos a la lista
    public static void procesarCompuesto(String compuesto, List<String> elementos) {
        // Patr√≥n para extraer los elementos y sus sub√≠ndices
        Pattern pattern = Pattern.compile("([A-Z][a-z]*)(\\d*)");
        Matcher matcher = pattern.matcher(compuesto);
        
        // Iterar sobre los elementos del compuesto
        while (matcher.find()) {
            String elemento = matcher.group(1); // S√≠mbolo del elemento
            if (!elementos.contains(elemento)) {
                elementos.add(elemento);
            }
        }
    }

    // M√©todo para crear la matriz de coeficientes
    public static double[][] crearMatrizCoeficientes(String[] reactantesCompuestos, String[] productosCompuestos, List<String> elementos) {
        int numElementos = elementos.size();
        double[][] matrizCoeficientes = new double[numElementos][reactantesCompuestos.length + productosCompuestos.length];
        
        // Llenar la matriz con los coeficientes de los reactantes
        for (int i = 0; i < reactantesCompuestos.length; i++) {
            Map<String, Integer> coeficientesCompuesto = obtenerCoeficientesCompuesto(reactantesCompuestos[i]);
            for (int j = 0; j < numElementos; j++) {
                String elemento = elementos.get(j);
                matrizCoeficientes[j][i] = coeficientesCompuesto.getOrDefault(elemento, 0);
            }
        }
        
        // Llenar la matriz con los coeficientes de los productos
        for (int i = 0; i < productosCompuestos.length; i++) {
            Map<String, Integer> coeficientesCompuesto = obtenerCoeficientesCompuesto(productosCompuestos[i]);
            for (int j = 0; j < numElementos; j++) {
                String elemento = elementos.get(j);
                matrizCoeficientes[j][reactantesCompuestos.length + i] = -coeficientesCompuesto.getOrDefault(elemento, 0);
            }
        }
        
        return matrizCoeficientes;
    }

    // M√©todo para obtener los coeficientes de un compuesto
    public static Map<String, Integer> obtenerCoeficientesCompuesto(String compuesto) {
        Map<String, Integer> coeficientesCompuesto = new HashMap<>();
        
        // Patr√≥n para extraer los elementos y sus sub√≠ndices
        Pattern pattern = Pattern.compile("([A-Z][a-z]*)(\\d*)");
        Matcher matcher = pattern.matcher(compuesto);
        
        // Iterar sobre los elementos del compuesto
        while (matcher.find()) {
            String elemento = matcher.group(1); // S√≠mbolo del elemento
            int coeficiente = obtenerCoeficiente(matcher.group(2)); // Coeficiente del elemento
            coeficientesCompuesto.put(elemento, coeficiente);
        }
        
        return coeficientesCompuesto;
    }

    // M√©todo para obtener el coeficiente de un elemento
    public static int obtenerCoeficiente(String subindice) {
        if (subindice.isEmpty()) {
            return 1; // Si no hay sub√≠ndice, el coeficiente es 1
        } else {
            return Integer.parseInt(subindice); // Utilizamos el sub√≠ndice como coeficiente
        }
    }

    // M√©todo para imprimir una matriz de coeficientes
    public static void imprimirMatriz(double[][] matriz) {
        for(int i = 0; i < matriz.length; i++) {
            for (int j = 0; j < matriz[0].length; j++) {
                System.out.print(matriz[i][j] + "\t");
            }
            System.out.println();
        }
    }
    
    /* Ventanas de dialogo */
    public void errorMessageWin(String title, String text) {
        javax.swing.JOptionPane.showMessageDialog(this, text, title, javax.swing.JOptionPane.ERROR_MESSAGE);
    }
    
    public void infoMessageWin(String title, String text) {
        javax.swing.JOptionPane.showMessageDialog(this, text, title, javax.swing.JOptionPane.INFORMATION_MESSAGE);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(BalanceApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(BalanceApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(BalanceApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(BalanceApp.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new BalanceApp().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button clearInputOutput;
    private javax.swing.JMenuItem exitOption;
    private javax.swing.JMenu fileSubMenu;
    private java.awt.TextField inputBalance;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar mainWinMenu;
    private javax.swing.JMenuItem moreAppInfo;
    private javax.swing.JMenu moreSubMenu;
    private java.awt.Label outSolution;
    private javax.swing.JDialog programInfo;
    private java.awt.Button shoeMethodButton;
    private java.awt.Button solutionButton;
    private javax.swing.JLabel tagForInputBalance;
    private java.awt.Label tagForOutSolution;
    private javax.swing.JPanel winBackground;
    // End of variables declaration//GEN-END:variables
}
